# -*- coding: utf-8 -*-
"""Task 1A.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jISb8JDpAoZJQ96FIMlFx645d333t-us

Using DFS
"""

#global
result = []

def dfs(G, v, visited, Indeg):
    visited.add(v)
    result.append(v)

    for neighbour in G[v]:
        #set the inDeg of child nodes --1
        Indeg[neighbour] -= 1

        if neighbour not in visited and Indeg[neighbour] == 0:
            dfs(G, neighbour, visited, Indeg)


f1 = open('input1A.txt', 'r')
f2 = open('output1A.txt', 'w')

n,m = map(int, f1.readline().split())

D = {}
for i in range(n+1):
    D[i] = []

InDeg = [0]*(n+1)
for i in range(m):
    s,d = map(int, f1.readline().split())
    D[s].append(d)
    InDeg[d] += 1

visited = set()

for i in range(1,n+1):
    if InDeg[i] == 0 and i not in visited:
        dfs(D, i, visited, InDeg)

# if it fails to visit all nodes/vertex.
if len(result) < n:
    f2.write('IMPOSSIBLE')
else:
    # print list to output format
    f2.write(str(result).strip('[]').replace(',',''))

f1.close()
f2.close()