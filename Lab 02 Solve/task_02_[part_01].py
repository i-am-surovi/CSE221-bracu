# -*- coding: utf-8 -*-
"""Task 02 [Parrt-02].ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jISb8JDpAoZJQ96FIMlFx645d333t-us
"""

# Task 2   [part-1]

# read the file
f = open("input2.txt","r")
# generate a output file by running the code
f2 = open("output2.txt","w")

# read the array size of Alice
N = int(f.readline())
# read the array of Alice
array1 = f.readline().split(" ")
array1 = list(map(int, array1))     # Convert ['1','2'] to [1,2]

# read the array size of Bob
M = int(f.readline())
# read the array of Bob
array2 = f.readline().split(" ")
array2 = list(map(int, array2))     # Convert ['1','2'] to [1,2]

new = array1 + array2

def mergeSort(arr):        # Out of place Sorting
    if len(arr) > 1:
        mid = len(arr)//2
        L = arr[:mid]      # Dividing the array elements into 2 halves
        R = arr[mid:]
        mergeSort(L)       # Sorting the first half
        mergeSort(R)       # Sorting the second half
        i = j = k = 0      # initializing indexes

#Copy data to temp arrays L[] and R[]
        while i < len(L) and j < len(R):
            if L[i] <= R[j]:
                arr[k] = L[i]
                i += 1
            else:
                arr[k] = R[j]
                j += 1
            k += 1
#Checking if any element was left
        while i < len(L):
            arr[k] = L[i]
            i += 1
            k += 1
        while j < len(R):
            arr[k] = R[j]
            j += 1
            k += 1
    return arr

f2.write(" ".join(str(num) for num in mergeSort(new)))

# Must Close the file
f2.close()